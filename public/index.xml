<?xml-stylesheet href="/rss.xsl" type="text/xsl"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Life Reboot Journal</title>
    <link>http://localhost:1313/Life-Reboot-Journal/</link>
    <description>Recent content on Life Reboot Journal</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 10 Oct 2025 00:00:00 +0000</lastBuildDate>
    
        <atom:link href="http://localhost:1313/Life-Reboot-Journal/index.xml" rel="self" type="application/rss+xml" />
    
    
    
        <item>
        <title>Github Page自动更新submodule的主题</title>
        <link>http://localhost:1313/Life-Reboot-Journal/notes/github-page%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0submodule%E7%9A%84%E4%B8%BB%E9%A2%98/</link>
        <pubDate>Fri, 10 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/Life-Reboot-Journal/notes/github-page%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0submodule%E7%9A%84%E4%B8%BB%E9%A2%98/</guid>
        <description>Life Reboot Journal http://localhost:1313/Life-Reboot-Journal/notes/github-page%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0submodule%E7%9A%84%E4%B8%BB%E9%A2%98/ -&lt;p&gt;搞好了Github page的项目之后，回家下载了项目，要跑起来的时候，总是提示如下内容：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;WARN  found no layout file for &amp;quot;html&amp;quot; for kind &amp;quot;home&amp;quot;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
WARN  found no layout file for &amp;quot;html&amp;quot; for kind &amp;quot;section&amp;quot;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
WARN  found no layout file for &amp;quot;html&amp;quot; for kind &amp;quot;taxonomy&amp;quot;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
WARN  found no layout file for &amp;quot;html&amp;quot; for kind &amp;quot;term&amp;quot;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;而且页面实际上没有渲染成功，一直都是老页面，又找不出哪里出错了。
最终发现主题因为是用submodule安装的，在新电脑上不会自动下载，需要执行下面的命令：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule init
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git submodule update
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;执行后就会自动下载主题了&lt;/p&gt;
- http://localhost:1313/Life-Reboot-Journal/notes/github-page%E8%87%AA%E5%8A%A8%E6%9B%B4%E6%96%B0submodule%E7%9A%84%E4%B8%BB%E9%A2%98/ - </description>
        </item>
    
    
    
        <item>
        <title>富途上下单腾讯的股价，最小加价单位是0.5元，为什么？</title>
        <link>http://localhost:1313/Life-Reboot-Journal/trading/%E5%AF%8C%E9%80%94%E4%B8%8A%E4%B8%8B%E5%8D%95%E8%85%BE%E8%AE%AF%E7%9A%84%E8%82%A1%E4%BB%B7%E6%9C%80%E5%B0%8F%E5%8A%A0%E4%BB%B7%E5%8D%95%E4%BD%8D%E6%98%AF0.5%E5%85%83/</link>
        <pubDate>Fri, 10 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/Life-Reboot-Journal/trading/%E5%AF%8C%E9%80%94%E4%B8%8A%E4%B8%8B%E5%8D%95%E8%85%BE%E8%AE%AF%E7%9A%84%E8%82%A1%E4%BB%B7%E6%9C%80%E5%B0%8F%E5%8A%A0%E4%BB%B7%E5%8D%95%E4%BD%8D%E6%98%AF0.5%E5%85%83/</guid>
        <description>Life Reboot Journal http://localhost:1313/Life-Reboot-Journal/trading/%E5%AF%8C%E9%80%94%E4%B8%8A%E4%B8%8B%E5%8D%95%E8%85%BE%E8%AE%AF%E7%9A%84%E8%82%A1%E4%BB%B7%E6%9C%80%E5%B0%8F%E5%8A%A0%E4%BB%B7%E5%8D%95%E4%BD%8D%E6%98%AF0.5%E5%85%83/ -&lt;p&gt;下载腾讯股票数据，做分析的时候，发现最小单位是0.5元，还排查了好久是不是自己哪里把数据搞错了。问了chatGPT没有给出正确的答案，而DeepSeek给出的是最好的，如下：&lt;/p&gt;
&lt;p&gt;您观察到的这个现象非常专业，这&lt;strong&gt;不是由富途证券决定的，而是由香港交易所的《交易规则》所规定的&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;简单来说，&lt;strong&gt;股票的最小变动单位（也叫&amp;quot;最小报价单位&amp;quot;或&amp;quot;tick size&amp;quot;）取决于该股票的价格区间&lt;/strong&gt;。价格越高，最小变动单位也越大。&lt;/p&gt;
&lt;h3 id=&#34;-核心原因港交所的最小报价单位规则&#34;&gt;📊 核心原因：港交所的&amp;quot;最小报价单位&amp;quot;规则&lt;/h3&gt;
&lt;p&gt;香港交易所为不同价格区间的股票设定了不同的最小变动单位，以确保市场流动性和报价效率。腾讯控股的股价长期处于数百港元的区间，因此适用较大的最小变动单位。&lt;/p&gt;
&lt;p&gt;以下是港交所当前实行的最小报价单位规则表：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;证券价格区间（港元）&lt;/th&gt;
          &lt;th style=&#34;text-align: left&#34;&gt;最小报价单位（港元）&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;0.01 至 0.25&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;0.001&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;0.25 以上 至 0.50&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;0.005&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;0.50 以上 至 10.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;0.010&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;10.00 以上 至 20.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;0.020&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;20.00 以上 至 100.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;0.050&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;100.00 以上 至 200.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;0.100&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;200.00 以上 至 500.00&lt;/strong&gt;&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;&lt;strong&gt;0.500&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;500.00 以上 至 1,000.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1.000&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;1,000.00 以上 至 2,000.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2.000&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;2,000.00 以上 至 5,000.00&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5.000&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;5,000.00 以上&lt;/td&gt;
          &lt;td style=&#34;text-align: left&#34;&gt;10.000&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;来源：香港交易所&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;-腾讯控股的实际情况&#34;&gt;🎯 腾讯控股的实际情况&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;腾讯控股的股票代码是 &lt;strong&gt;00700.HK&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;其股价在很长一段时间内都处于 &lt;strong&gt;300-400港元&lt;/strong&gt; 的区间。&lt;/li&gt;
&lt;li&gt;根据上表，当股价在 &lt;strong&gt;200港元至500港元&lt;/strong&gt; 之间时，适用的最小报价单位就是 &lt;strong&gt;0.5港元&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，您在富途或其他任何接入港交所的交易终端上为腾讯下单时，都必须遵守这个规则。您的报价必须是 &lt;strong&gt;0.5港元的整数倍&lt;/strong&gt;，例如可以报 320.0、320.5、321.0，但不能报 320.1 或 320.2。&lt;/p&gt;
&lt;h3 id=&#34;-为什么要有这样的规定&#34;&gt;💡 为什么要有这样的规定？&lt;/h3&gt;
&lt;p&gt;这套&amp;quot;阶梯式&amp;quot;的最小报价单位规则主要有以下几个目的：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;维持买卖价差&lt;/strong&gt;：防止价差过窄，确保做市商和流动性提供者有合理的利润空间，从而愿意为市场提供流动性。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;提升大额交易效率&lt;/strong&gt;：对于高价股，过小的变动单位对整体交易金额影响微乎其微，但会大大增加报价的复杂性和订单簿的深度，不利于大额订单的成交。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;减少波动&lt;/strong&gt;：在一定程度上可以减少因微小价格变动导致的频繁交易和市场噪音。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;结论：&lt;/strong&gt; 您看到的 &lt;strong&gt;0.5元&lt;/strong&gt; 的最小加价单位，是&lt;strong&gt;港交所为像腾讯这样的高价股设定的官方交易规则&lt;/strong&gt;，富途、辉立、耀才等所有券商都必须遵守。这是一个全球通行的惯例，在美股市场（不同股价对应1美分、5美分等）和其他主要交易所也都存在类似的规则。&lt;/p&gt;- http://localhost:1313/Life-Reboot-Journal/trading/%E5%AF%8C%E9%80%94%E4%B8%8A%E4%B8%8B%E5%8D%95%E8%85%BE%E8%AE%AF%E7%9A%84%E8%82%A1%E4%BB%B7%E6%9C%80%E5%B0%8F%E5%8A%A0%E4%BB%B7%E5%8D%95%E4%BD%8D%E6%98%AF0.5%E5%85%83/ - </description>
        </item>
    
    
    
        <item>
        <title>github page自动部署</title>
        <link>http://localhost:1313/Life-Reboot-Journal/notes/github-page%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</link>
        <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/Life-Reboot-Journal/notes/github-page%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</guid>
        <description>Life Reboot Journal http://localhost:1313/Life-Reboot-Journal/notes/github-page%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/ -&lt;p&gt;在项目的settings页面，找到Pages，把 Build and deployment改成 Github Actions.&lt;/p&gt;
&lt;p&gt;然后在 Use a suggested workflow, browse all workflows，找到hugo，点击生成默认的 workflows，然后把这个workflows的hugo.yaml做如下修改：&lt;/p&gt;
&lt;p&gt;1、HUGO_VERSION 改成与自己的版本一致&lt;/p&gt;
&lt;p&gt;2、baseUL改成：&lt;code&gt;--baseURL &amp;quot;https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/&amp;quot;&lt;/code&gt;，原来的方式是主page级别，我要的是项目级的page.&lt;/p&gt;
&lt;p&gt;后续只要git push就会自动创建部署了。在这个页面可以看到部署进度 &lt;a href=&#34;https://github.com/shahuwang/Life-Reboot-Journal/actions&#34;&gt;https://github.com/shahuwang/Life-Reboot-Journal/actions&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;这样子后续在没有hugo的电脑上，只要编辑文件的markdown就可以了，github Action会自动生成html。&lt;/p&gt;
- http://localhost:1313/Life-Reboot-Journal/notes/github-page%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/ - </description>
        </item>
    
    
    
        <item>
        <title>obsidian与hugo结合的方法.md</title>
        <link>http://localhost:1313/Life-Reboot-Journal/notes/obsidian%E4%B8%8Ehugo-%E7%BB%93%E5%90%88%E7%9A%84%E6%96%B9%E6%B3%95/</link>
        <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/Life-Reboot-Journal/notes/obsidian%E4%B8%8Ehugo-%E7%BB%93%E5%90%88%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
        <description>Life Reboot Journal http://localhost:1313/Life-Reboot-Journal/notes/obsidian%E4%B8%8Ehugo-%E7%BB%93%E5%90%88%E7%9A%84%E6%96%B9%E6%B3%95/ -&lt;p&gt;由于两者的markdown配置不一样，无法直接把obsidian编辑的markdown放到github page项目里。不过可以使用obsidian的Enhancing Export插件，把obsidian的文章导出为hugo的markdown。&lt;/p&gt;
&lt;p&gt;把导出的markdown放到github page的content对应目录下，即可。&lt;/p&gt;
- http://localhost:1313/Life-Reboot-Journal/notes/obsidian%E4%B8%8Ehugo-%E7%BB%93%E5%90%88%E7%9A%84%E6%96%B9%E6%B3%95/ - </description>
        </item>
    
    
    
        <item>
        <title>使用Diary主题解决tag页面跳转404的问题</title>
        <link>http://localhost:1313/Life-Reboot-Journal/notes/tags%E8%B7%B3%E8%BD%AC404%E7%9A%84%E9%97%AE%E9%A2%98/</link>
        <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/Life-Reboot-Journal/notes/tags%E8%B7%B3%E8%BD%AC404%E7%9A%84%E9%97%AE%E9%A2%98/</guid>
        <description>Life Reboot Journal http://localhost:1313/Life-Reboot-Journal/notes/tags%E8%B7%B3%E8%BD%AC404%E7%9A%84%E9%97%AE%E9%A2%98/ -&lt;p&gt;Diary主题默认所有项目都是主github page，但我的是项目级别的github page，页面的tags标签自动跳转时不带项目名称，导致跳转url为404页面。&lt;/p&gt;
&lt;p&gt;只需要在 theme/hugo-theme-diary/layouts/_default/single.html里，复制到项目的 layouts/_default/single.html，把如下这一行：&lt;/p&gt;
&lt;p&gt;&lt;code&gt; &amp;lt;a href=&amp;quot;{{ &amp;quot;/tags/&amp;quot; | relLangURL }}{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;替换成：&lt;/p&gt;
&lt;p&gt;&lt;code&gt; &amp;lt;a href=&amp;quot;{{ &amp;quot;/Life-Reboot-Journal/tags/&amp;quot; | relURL }}{{ . | urlize }}&amp;quot;&amp;gt;{{ . }}&amp;lt;/a&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即可解决tags跳转失败的问题。&lt;/p&gt;
- http://localhost:1313/Life-Reboot-Journal/notes/tags%E8%B7%B3%E8%BD%AC404%E7%9A%84%E9%97%AE%E9%A2%98/ - </description>
        </item>
    
    
    
        <item>
        <title>列表页只显示文章摘要的方法</title>
        <link>http://localhost:1313/Life-Reboot-Journal/notes/%E5%88%97%E8%A1%A8%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E7%9A%84%E6%96%B9%E6%B3%95/</link>
        <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/Life-Reboot-Journal/notes/%E5%88%97%E8%A1%A8%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E7%9A%84%E6%96%B9%E6%B3%95/</guid>
        <description>Life Reboot Journal http://localhost:1313/Life-Reboot-Journal/notes/%E5%88%97%E8%A1%A8%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E7%9A%84%E6%96%B9%E6%B3%95/ -&lt;p&gt;添加如下标签，标签之前的文章就会展示在列表页，之后的则不会展示&lt;/p&gt;
&lt;p&gt;&amp;lt;!--more--&amp;gt;&lt;/p&gt;
- http://localhost:1313/Life-Reboot-Journal/notes/%E5%88%97%E8%A1%A8%E9%A1%B5%E5%8F%AA%E6%98%BE%E7%A4%BA%E6%96%87%E7%AB%A0%E6%91%98%E8%A6%81%E7%9A%84%E6%96%B9%E6%B3%95/ - </description>
        </item>
    
    
    
        <item>
        <title>如何插入图片</title>
        <link>http://localhost:1313/Life-Reboot-Journal/notes/%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/</link>
        <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/Life-Reboot-Journal/notes/%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/</guid>
        <description>Life Reboot Journal http://localhost:1313/Life-Reboot-Journal/notes/%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/ -&lt;p&gt;直接在文章markdown文件的同级目录下，建一个与文章同名的文件夹，然后使用这样子的方式即可插入图片 &lt;code&gt;![说明](图片.png)&lt;/code&gt;&lt;/p&gt;
- http://localhost:1313/Life-Reboot-Journal/notes/%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87%E6%8F%92%E5%85%A5/ - </description>
        </item>
    
    
    
        <item>
        <title>支持数学公式</title>
        <link>http://localhost:1313/Life-Reboot-Journal/notes/%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</link>
        <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/Life-Reboot-Journal/notes/%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/</guid>
        <description>Life Reboot Journal http://localhost:1313/Life-Reboot-Journal/notes/%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/ -&lt;p&gt;obsidian导出的markdown文章有数学公式，我目前使用的diary这个插件，没有数学公式支持，增加mathjax的支持方法如下：&lt;/p&gt;
&lt;p&gt;1、在项目的layouts/shortcodes/增加 mathjax.html，内容如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;text/javascript&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;async&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;mathjax&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  {{ .Inner | safeHTML }}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;div&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;增加后即可自动支持mathjax的数学公式了.&lt;/p&gt;
- http://localhost:1313/Life-Reboot-Journal/notes/%E6%94%AF%E6%8C%81%E6%95%B0%E5%AD%A6%E5%85%AC%E5%BC%8F/ - </description>
        </item>
    
    
    
        <item>
        <title>添加icon</title>
        <link>http://localhost:1313/Life-Reboot-Journal/notes/%E6%B7%BB%E5%8A%A0icon/</link>
        <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/Life-Reboot-Journal/notes/%E6%B7%BB%E5%8A%A0icon/</guid>
        <description>Life Reboot Journal http://localhost:1313/Life-Reboot-Journal/notes/%E6%B7%BB%E5%8A%A0icon/ -&lt;p&gt;生成一个icon图片，命名为 favicon.ico，放到 static/images/favicon.ico。&lt;/p&gt;
&lt;p&gt;然后在 hugo.yaml 配置里加上：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;params:
  favicon: &amp;#34;images/favicon.ico&amp;#34;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这样子就有了icon了&lt;/p&gt;
- http://localhost:1313/Life-Reboot-Journal/notes/%E6%B7%BB%E5%8A%A0icon/ - </description>
        </item>
    
    
    
        <item>
        <title>相似图片的判定及海量图片快速查找相似图片的实现方案</title>
        <link>http://localhost:1313/Life-Reboot-Journal/deep-dives/%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%88%A4%E5%AE%9A%E5%8F%8A%E6%B5%B7%E9%87%8F%E5%9B%BE%E7%89%87%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</link>
        <pubDate>Thu, 09 Oct 2025 00:00:00 +0000</pubDate>
        
        <guid>http://localhost:1313/Life-Reboot-Journal/deep-dives/%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%88%A4%E5%AE%9A%E5%8F%8A%E6%B5%B7%E9%87%8F%E5%9B%BE%E7%89%87%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/</guid>
        <description>Life Reboot Journal http://localhost:1313/Life-Reboot-Journal/deep-dives/%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%88%A4%E5%AE%9A%E5%8F%8A%E6%B5%B7%E9%87%8F%E5%9B%BE%E7%89%87%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/ -&lt;h5 id=&#34;前言&#34;&gt;前言&lt;/h5&gt;
&lt;p&gt;本文所述相似图片，即为在视觉上一致的图片，因图片格式、形状变化、图片亮度等等变化，无法使用图片md5的方法来判断图片是否相似。在当前业务场景中，判断两张图片是否视觉一致，以及快速在海量图片中找到视觉相似的图片，有着迫切的需求，如下2个场景急需图片相似判定及快速查找的方案：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;接口重构或者底层图片处理库的升级，需要使用线上请求，重放到测试环境中，使用图片的相似判定方法，对线上和测试环境下载的图片进行对比，看改动是否影响了下发的图片。&lt;/li&gt;
&lt;li&gt;审核到一张涉及黄反的图片，快速查找当前图片服务里是否还有相似的图片进行屏蔽。
本文所述方案包含：&lt;/li&gt;
&lt;li&gt;图片的相似判定方法，可用于接口变更时进行对比以保证变更不影响图片的下发。&lt;/li&gt;
&lt;li&gt;快速在海量图片中找到相似图片的方法，可用于相似黄反图片的快速查找。&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;相似图片判定需要符合的要求&#34;&gt;相似图片判定需要符合的要求&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;视觉物体完全一致的图片，如下面2张图&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&#34;../%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%88%A4%E5%AE%9A%E5%8F%8A%E6%B5%B7%E9%87%8F%E5%9B%BE%E7%89%87%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/055722d0b96b8580abaca6ef170d3cba9ff93f82.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;../%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%88%A4%E5%AE%9A%E5%8F%8A%E6%B5%B7%E9%87%8F%E5%9B%BE%E7%89%87%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/fb71f59d8754d61f3f8316d7c84901b49b5cc320.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;图片格式不一样，也可以判定&lt;/li&gt;
&lt;li&gt;图片的亮度、对比度较小调整的情况下，仍然可以判定&lt;/li&gt;
&lt;li&gt;图片等比缩放后，仍可以判定&lt;/li&gt;
&lt;li&gt;图片压缩质量变化后，仍可以判定&lt;/li&gt;
&lt;li&gt;图片有变形拉伸等，仍可以判定到有一定相似度&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;图片的相似判定方法&#34;&gt;图片的相似判定方法&lt;/h5&gt;
&lt;p&gt;目前常见的图片相似判定方法如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;图像颜色直方图是一种经典、简单但实用的图像相似性判定方法，它基于图像中颜色或亮度的统计分布来衡量两张图像之间的相似度。&lt;/li&gt;
&lt;li&gt;感知哈希是一种用于图像相似性判断的轻量级算法，试图捕捉图像的&amp;quot;感知特征&amp;quot;&amp;mdash;&amp;mdash;也就是肉眼看到的视觉结构。其先压缩图片，然后对压缩后的图片灰度化，再对灰度化后的图片提取特征（如 DCT），最后生成生成hash值，然后用汉明距离对hash值进行距离判定，低于10的说明有相似性，低于5的说明图片一致。常见的实现方式有均值哈希（aHash）、差值哈希（dHash）、感知哈希（pHash）和wHash（小波哈希）。&lt;/li&gt;
&lt;li&gt;结构相似度（SSIM, Structural Similarity Index）模拟人眼对亮度、对比度、结构等的感知，SSIM ∈ [0, 1]，越接近1表示越相似，专注于图像整体结构信息，对像素级别变化较敏感。&lt;/li&gt;
&lt;li&gt;特征点匹配（局部特征）提取图像的关键点（角点、边缘），并进行匹配，常见方法：SIFT，SURF，ORB，通过匹配点的数量或匹配得分评估，鲁棒性强，抗旋转、缩放、部分遮挡，算法相对复杂。&lt;/li&gt;
&lt;li&gt;深度学习嵌入（CNN Embedding）用卷积神经网络（如 ResNet、Inception、EfficientNet）提取语义特征向量（一般为512或2048维），用余弦相似度、欧氏距离等度量，强语义理解能力，能区分图片内容而不仅仅是像素，较为复杂。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;本文主要叙述感知哈希用于图片相似度判定，图像颜色直方图方法判断准确率不高，而其余三种方法则实现复杂或者运行缓慢，不太适用于我们当前的业务场景需求。&lt;/p&gt;
&lt;p&gt;感知哈希的四种实现方案，优缺点如下：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;方法名&lt;/th&gt;
          &lt;th&gt;原理&lt;/th&gt;
          &lt;th&gt;特点&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;aHash（平均哈希）&lt;/td&gt;
          &lt;td&gt;灰度图均值对比&lt;/td&gt;
          &lt;td&gt;快速但抗变形弱&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;dHash（差值哈希）&lt;/td&gt;
          &lt;td&gt;相邻像素比较差值&lt;/td&gt;
          &lt;td&gt;对细节敏感&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;pHash（感知哈希）&lt;/td&gt;
          &lt;td&gt;DCT频域特征&lt;/td&gt;
          &lt;td&gt;鲁棒性更强，推荐使用&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;wHash（小波哈希）&lt;/td&gt;
          &lt;td&gt;小波变换&lt;/td&gt;
          &lt;td&gt;抗干扰性强，但较慢&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;综合准确率和运行性能来看，选用pHash进行图片相似度判定是比较合适的。&lt;/p&gt;
&lt;h5 id=&#34;基于dct频域特征的phash的核心原理&#34;&gt;基于DCT频域特征的pHash的核心原理&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;图像缩放，将图像缩小为 32×32 像素（或其他固定尺寸），降低复杂度但保留大致结构&lt;/li&gt;
&lt;li&gt;转为灰度图 ，将 RGB 图像转为灰度，只保留亮度信息&lt;/li&gt;
&lt;li&gt;离散余弦变换（DCT），使用 DCT 将图像转换为频域数据。DCT 会把图像转换为一堆频率系数，其中前几个系数代表整体结构，后面代表细节。&lt;/li&gt;
&lt;li&gt;提取低频特征，截取 DCT 左上角的 8×8 共 64 个低频系数（去掉最左上角的 DC 分量）&lt;/li&gt;
&lt;li&gt;生成哈希，计算这 64 个值的平均值，然后将每个值与均值比较：
≥ 均值：置 1
＜ 均值：置 0&lt;br&gt;
得到一个 64 位的二进制字符串，即图像的 pHash&lt;/li&gt;
&lt;li&gt;示例输出（十六进制）: 3c8f9ad3739e4aa5&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;使用汉明距离比较两个phash&#34;&gt;使用汉明距离比较两个pHash&lt;/h5&gt;
&lt;p&gt;汉明距离（Hamming Distance）是一种度量两个等长字符串之间差异的指标，表示两个字符串在相同位置上不同字符的个数。它最早由理查德·汉明（Richard Hamming）提出，用于纠错编码领域，如海明码。&lt;/p&gt;
&lt;p&gt;在图像相似性检测、感知哈希（aHash、dHash、pHash）中，它被广泛用于衡量两张图像的&amp;quot;相似度&amp;quot;。&lt;/p&gt;
&lt;p&gt;汉明距离 = A 和 B 在对应位上不相同的位数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;A = 1011101  
B = 1001001  
     ↑ ↑       （两处不同）

→ 汉明距离 = 2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当我们使用感知哈希算法（如 pHash）将一张图像转为一个定长的二进制哈希值（通常是 64 位），我们可以通过汉明距离来判断图像是否相似：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;汉明距离&lt;/th&gt;
          &lt;th&gt;图像相似性解读&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;0&lt;/td&gt;
          &lt;td&gt;几乎完全一致（可能是重复）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;1&amp;ndash;5&lt;/td&gt;
          &lt;td&gt;高度相似（可能是轻度编辑）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;6&amp;ndash;10&lt;/td&gt;
          &lt;td&gt;有一定相似性（结构、构图相似，但非同图）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;11&amp;ndash;20&lt;/td&gt;
          &lt;td&gt;差异明显，不同图片&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;≥21&lt;/td&gt;
          &lt;td&gt;明显不同&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;为什么通常认为 5~10 是「可接受的相似范围」？因为：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;感知哈希是模糊的特征摘要，轻度裁剪、缩放、亮度变化或压缩会导致部分位发生翻转；&lt;/li&gt;
&lt;li&gt;实践中发现，轻微变动通常造成 1&amp;ndash;5 位哈希不同；&lt;/li&gt;
&lt;li&gt;6&amp;ndash;10 表示局部较多的变化或是同类图片（如同一物体不同角度）；&lt;/li&gt;
&lt;li&gt;超过 15 通常是完全不同的图像。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实际使用建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果你要「查重」：汉明距离 ≤ 5&lt;/li&gt;
&lt;li&gt;如果你要「推荐相似图」：可以接受 ≤ 10&lt;/li&gt;
&lt;li&gt;如果你要「反盗图检测」：可以考虑 ≤ 12~15，但需人工审核辅助&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;使用phash及汉明距离判定图片相似性示例代码go&#34;&gt;使用pHash及汉明距离判定图片相似性示例代码（Go）&lt;/h5&gt;
&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;log&amp;quot;

    // 图像格式支持
    _ &amp;quot;image/jpeg&amp;quot;
    _ &amp;quot;image/png&amp;quot;

    &amp;quot;github.com/corona10/goimagehash&amp;quot;
    &amp;quot;github.com/disintegration/imaging&amp;quot;
    _ &amp;quot;golang.org/x/image/webp&amp;quot;
)

func main() {
    // 加载图片
    img1Path := &amp;quot;img1.jpg&amp;quot;
    img2Path := &amp;quot;img2.webp&amp;quot;

    img1, err := imaging.Open(img1Path)
    if err != nil {
        log.Fatalf(&amp;quot;Failed to open image 1: %v&amp;quot;, err)
    }

    img2, err := imaging.Open(img2Path)
    if err != nil {
        log.Fatalf(&amp;quot;Failed to open image 2: %v&amp;quot;, err)
    }

    // 生成 pHash
    hash1, err := goimagehash.PerceptionHash(img1)
    if err != nil {
        log.Fatalf(&amp;quot;Failed to compute pHash for img1: %v&amp;quot;, err)
    }

    hash2, err := goimagehash.PerceptionHash(img2)
    if err != nil {
        log.Fatalf(&amp;quot;Failed to compute pHash for img2: %v&amp;quot;, err)
    }

    // 计算汉明距离
    distance, err := hash1.Distance(hash2)
    if err != nil {
        log.Fatalf(&amp;quot;Failed to calculate Hamming distance: %v&amp;quot;, err)
    }

    fmt.Printf(&amp;quot;pHash 1: %s\n&amp;quot;, hash1.ToString())
    fmt.Printf(&amp;quot;pHash 2: %s\n&amp;quot;, hash2.ToString())
    fmt.Printf(&amp;quot;汉明距离: %d\n&amp;quot;, distance)

    // 判断是否相似（阈值可以根据需求调整）
    if distance &amp;lt;= 10 {
        fmt.Println(&amp;quot;这两张图片可能是相似的 ✅&amp;quot;)
    } else {
        fmt.Println(&amp;quot;这两张图片差异较大 ❌&amp;quot;)
    }
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;img1.jpg和img2.webp是完全一样的图片，只是格式不一样，输出结果如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pHash 1: p:f4b883c6338bc3cc
pHash 2: p:f4b883c6338bc3cc
汉明距离: 0
这两张图片可能是相似的
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将img1.jpg从400x400，缩放成100x100，进行汉明距离计算，结果仍然为0。
将img1.jpg缩放拉伸成600x100之后，汉明距离依然为0。
说明pHash可以判定不同格式的图片，也可以判定等比缩放的图片，对拉伸的图片也具备一定的判定能力。&lt;/p&gt;
&lt;h5 id=&#34;海量图片快速查找相似图片&#34;&gt;海量图片快速查找相似图片&lt;/h5&gt;
&lt;p&gt;黄反内容筛查这个业务场景，查出一张黄色/反动图片，需要可以快速的查找图片上传服务中是否还有相似的图片，以防止遗漏造成政策风险。如果直接把海量图片重新过一次图片审核，则成本过高，利用图片相似度判定的pHash，可以较低成本解决此问题，但把海量照片一张一张来对比pHash，则效率过于低效。&lt;/p&gt;
&lt;p&gt;基于 pHash（感知哈希） 和 LSH（局部敏感哈希）+ Redis 实现相似图片的快速查找，是一个实用且高效的解决方案。LSH（Locality Sensitive Hashing）将高维的pHash向量映射到多个桶中，使得相似的数据被映射到同一个桶，在查找时，只需比较同一个桶里的元素，降低计算量。&lt;/p&gt;
&lt;p&gt;pHash + LSH + Redis 存储图片的过程大致如下（示例说明，具体使用过程存储结构会有所调整）：
![[phash与redis的计算过程.png]]&lt;/p&gt;
&lt;p&gt;![[相似图片海量查找.png]]&lt;/p&gt;
&lt;p&gt;用python代码简单的实现来说明使用流程：
步骤一、计算图片的pHash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;from PIL import Image
import imagehash

def compute_phash(image_path):
    img = Image.open(image_path)
    return imagehash.phash(img)  # 返回的是ImageHash对象，可以转成int或str
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤二、将pHash值输入LSH并构建倒排索引（存入Redis），简单实现（以分段LSH为例）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;import redis

# 连接Redis
r = redis.StrictRedis(host=&#39;localhost&#39;, port=6379, db=0)

def lsh_buckets(phash_bin, band_size=8):
    &amp;quot;&amp;quot;&amp;quot;将64位phash切成8段，返回8个bucket key&amp;quot;&amp;quot;&amp;quot;
    return [phash_bin[i:i+band_size] for i in range(0, 64, band_size)]

def index_image(image_id, phash_bin):
    buckets = lsh_buckets(phash_bin)
    for i, bucket in enumerate(buckets):
        key = f&amp;quot;lsh_bucket:{i}:{bucket}&amp;quot;
        r.sadd(key, image_id)  # 把图片ID加入桶中
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤三、查找相似图片&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def query_similar_images(query_phash_bin, threshold=10):
    candidate_ids = set()
    buckets = lsh_buckets(query_phash_bin)
    
    for i, bucket in enumerate(buckets):
        key = f&amp;quot;lsh_bucket:{i}:{bucket}&amp;quot;
        ids = r.smembers(key)
        candidate_ids.update(ids)
    
    # 过滤阶段：计算海明距离
    similar_images = []
    query_int = int(query_phash_bin, 2)
    
    for cid in candidate_ids:
        cid = cid.decode()  # Redis返回bytes
        stored_phash = r.get(f&amp;quot;phash:{cid}&amp;quot;)
        if stored_phash:
            stored_int = int(stored_phash.decode(), 2)
            dist = bin(query_int ^ stored_int).count(&amp;quot;1&amp;quot;)
            if dist &amp;lt;= threshold:
                similar_images.append((cid, dist))
    
    # 按距离排序
    return sorted(similar_images, key=lambda x: x[1])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;步骤4：存储图片pHash（辅助步骤），在图片首次索引时，同时存储其pHash&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;def store_phash(image_id, phash_bin):
    r.set(f&amp;quot;phash:{image_id}&amp;quot;, phash_bin)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们从一张图像中提取出 &lt;strong&gt;pHash 值&lt;/strong&gt;（通常是 64 位二进制字符串，例如）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pHash = &amp;quot;1101010110010010010110100100101010100110010110101010101010101010&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将 pHash 切分为多个 &lt;strong&gt;bands&lt;/strong&gt;（即 LSH 的子哈希段）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;bands = [
  &#39;11010101&#39;,  # band 0
  &#39;10010010&#39;,  # band 1
  &#39;01011010&#39;,  # ...
  &#39;01001010&#39;,
  &#39;10100110&#39;,
  &#39;01011010&#39;,
  &#39;10101010&#39;,
  &#39;10101010&#39;
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;为每个 band 生成 Redis 中的桶 key（中间的数据即为哈希段的序号，分为8段）：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;lsh_bucket:0:11010101
lsh_bucket:1:10010010
...
lsh_bucket:7:10101010
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;以上述的 lsh_bucket:x:xxxxxxxx 为Redis桶的key，桶的存储类型为Set，值是图片id。pHash分成8段，每段按序生成桶key，取出桶key对应的图片id的集合，然后找到每个图片的pHash，进行汉明距离的计算，找到相似图片。&lt;/p&gt;
&lt;p&gt;分成8个段，通过8个桶的联合查找，提高查全率。&lt;/p&gt;
&lt;h5 id=&#34;基于lsh查找相似图片的查全率&#34;&gt;基于LSH查找相似图片的查全率&lt;/h5&gt;
&lt;p&gt;&lt;script type=&#34;text/javascript&#34; async
  src=&#34;https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js&#34;&gt;
&lt;/script&gt;
&lt;div class=&#34;mathjax&#34;&gt;
  
$$
P(s) = 1 - (1 - s^r)^b 
$$

&lt;/div&gt;

上述公式是在描述基于分段哈希 (banding technique) 的 LSH 方法中，&lt;strong&gt;估计具有相似度 s 的两个元素在至少一个 band 中发生碰撞的概率&lt;/strong&gt;的常见且被广泛使用的公式。其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;s 是两个元素的相似度（1 - 距离/总位数），汉明距离=6，总位数为64，则s=1-6/64=0.906&lt;/li&gt;
&lt;li&gt;r 是每 band 的位数&lt;/li&gt;
&lt;li&gt;b 是 band 数量
举例：如果两张图片海明距离是 6（相似度约 90.6%）
假设 r = 8, b = 8&lt;/li&gt;
&lt;li&gt;假设 &lt;code&gt;r = 8&lt;/code&gt;, &lt;code&gt;b = 8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;则被 LSH 检出的概率 ≈ 1 - (1 - 0.906⁸)⁸ ≈ 99.21%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如何选择 r 和 b？一般经验法则（以 64 位 pHash 为例）：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;目标&lt;/th&gt;
          &lt;th&gt;建议设置&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;相似图像查全率高（Recall 优先）&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;r = 8&lt;/code&gt;, &lt;code&gt;b = 8&lt;/code&gt;（即 64 位分成 8 个 band，每 band 8 位）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;精度更高（减少误报）&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;r = 16&lt;/code&gt;, &lt;code&gt;b = 4&lt;/code&gt;（更严格 band 规则）&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;模糊匹配更宽松（召回多）&lt;/td&gt;
          &lt;td&gt;&lt;code&gt;r = 4&lt;/code&gt;, &lt;code&gt;b = 16&lt;/code&gt;（宽容 band）&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;实例对比（假设 s = 0.9，汉明距离=6.4）：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;(r, b)&lt;/th&gt;
          &lt;th&gt;&lt;code&gt;P_hit (s=0.9)&lt;/code&gt;&lt;/th&gt;
          &lt;th&gt;候选图数量趋势&lt;/th&gt;
          &lt;th&gt;精度&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;(4, 16)&lt;/td&gt;
          &lt;td&gt;≈ 99.8%&lt;/td&gt;
          &lt;td&gt;多（宽松）&lt;/td&gt;
          &lt;td&gt;低&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;(8, 8)&lt;/td&gt;
          &lt;td&gt;≈ 98.8%&lt;/td&gt;
          &lt;td&gt;适中&lt;/td&gt;
          &lt;td&gt;中&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;(16, 4)&lt;/td&gt;
          &lt;td&gt;≈ 89.0%&lt;/td&gt;
          &lt;td&gt;少&lt;/td&gt;
          &lt;td&gt;高&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;(32, 2)&lt;/td&gt;
          &lt;td&gt;≈ 66.0%&lt;/td&gt;
          &lt;td&gt;很少&lt;/td&gt;
          &lt;td&gt;很高&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;越小的 &lt;code&gt;r&lt;/code&gt;，每个 band 越容易碰撞 → &lt;strong&gt;查全率高但误报多&lt;/strong&gt;&lt;br&gt;
越大的 &lt;code&gt;r&lt;/code&gt;，要求越严格 → &lt;strong&gt;误报少但漏掉一些相似图像&lt;/strong&gt;
推荐组合总结（64位 pHash 场景）：&lt;/p&gt;
&lt;table&gt;
  &lt;thead&gt;
      &lt;tr&gt;
          &lt;th&gt;场景&lt;/th&gt;
          &lt;th&gt;推荐参数 (&lt;code&gt;r&lt;/code&gt;, &lt;code&gt;b&lt;/code&gt;)&lt;/th&gt;
      &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
      &lt;tr&gt;
          &lt;td&gt;默认使用（平衡 recall/precision）&lt;/td&gt;
          &lt;td&gt;(8, 8)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;想召回更多相似图（对 recall 要求高）&lt;/td&gt;
          &lt;td&gt;(4, 16)&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
          &lt;td&gt;精度要求极高（减少误判）&lt;/td&gt;
          &lt;td&gt;(16, 4)&lt;/td&gt;
      &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;假设你有 1,000,000 张图，使用 64 位 pHash，分 8 个 band。
如果 r = 4：每个 band 有 2⁴ = 16 种可能 → 分 bucket 粒度很粗，一个 bucket 可能有几万个图，查询时要对成千上万张图做 Hamming 比较（慢）
如果 r = 8：每个 band 有 2⁸ = 256 种可能 → 分得细，每个 bucket 只有几百张图，查询候选少，速度更快&lt;/p&gt;
&lt;p&gt;综上，使用每band的位数r=8，band的数量b=8，在64位pHash的使用场景中，查全率和查找速度都是相对均衡的。&lt;/p&gt;
&lt;h5 id=&#34;总结&#34;&gt;总结&lt;/h5&gt;
&lt;p&gt;利用图片的pHash进行相似图片的查找，计算速度较快，准确率高，在配合图片宽高数据等，可以用于图片下发服务流量对比测试，确保接口重构、优化过程中没有下发错误的照片。而使用LSH + Redis，则可以实现海量图片中相似图片的快速查找，在图片的审核上有较好的应用场景，可以快速找到图片上传服务里相似的黄反图片，且成本低廉。&lt;/p&gt;- http://localhost:1313/Life-Reboot-Journal/deep-dives/%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%88%A4%E5%AE%9A%E5%8F%8A%E6%B5%B7%E9%87%8F%E5%9B%BE%E7%89%87%E5%BF%AB%E9%80%9F%E6%9F%A5%E6%89%BE%E7%9B%B8%E4%BC%BC%E5%9B%BE%E7%89%87%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%A1%88/ - </description>
        </item>
    
    
  </channel>
</rss> 